// <auto-generated />
using System;
using CineWorld.Services.MovieAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CineWorld.Services.MovieAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Phim Bộ",
                            Slug = "series",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Phim Lẻ",
                            Slug = "single",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "TV Shows",
                            Slug = "tvshows",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Hoạt Hình",
                            Slug = "hoathinh",
                            Status = true
                        });
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CountryId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            Name = "Trung Quốc",
                            Slug = "trung-quoc",
                            Status = true
                        },
                        new
                        {
                            CountryId = 2,
                            Name = "Hàn Quốc",
                            Slug = "han-quoc",
                            Status = true
                        },
                        new
                        {
                            CountryId = 3,
                            Name = "Nhật Bản",
                            Slug = "nhat-ban",
                            Status = true
                        },
                        new
                        {
                            CountryId = 4,
                            Name = "Thái Lan",
                            Slug = "thai-lan",
                            Status = true
                        },
                        new
                        {
                            CountryId = 5,
                            Name = "Âu Mỹ",
                            Slug = "au-my",
                            Status = true
                        },
                        new
                        {
                            CountryId = 6,
                            Name = "Đài Loan",
                            Slug = "dai-loan",
                            Status = true
                        },
                        new
                        {
                            CountryId = 7,
                            Name = "Hồng Kông",
                            Slug = "hong-kong",
                            Status = true
                        },
                        new
                        {
                            CountryId = 8,
                            Name = "Ấn Độ",
                            Slug = "an-do",
                            Status = true
                        },
                        new
                        {
                            CountryId = 9,
                            Name = "Anh",
                            Slug = "anh",
                            Status = true
                        },
                        new
                        {
                            CountryId = 10,
                            Name = "Pháp",
                            Slug = "phap",
                            Status = true
                        },
                        new
                        {
                            CountryId = 11,
                            Name = "Canada",
                            Slug = "canada",
                            Status = true
                        },
                        new
                        {
                            CountryId = 12,
                            Name = "Quốc Gia Khác",
                            Slug = "quoc-gia-khac",
                            Status = true
                        },
                        new
                        {
                            CountryId = 13,
                            Name = "Đức",
                            Slug = "duc",
                            Status = true
                        },
                        new
                        {
                            CountryId = 14,
                            Name = "Tây Ban Nha",
                            Slug = "tay-ban-nha",
                            Status = true
                        },
                        new
                        {
                            CountryId = 15,
                            Name = "Thổ Nhĩ Kỳ",
                            Slug = "tho-nhi-ky",
                            Status = true
                        },
                        new
                        {
                            CountryId = 16,
                            Name = "Hà Lan",
                            Slug = "ha-lan",
                            Status = true
                        },
                        new
                        {
                            CountryId = 17,
                            Name = "Indonesia",
                            Slug = "indonesia",
                            Status = true
                        },
                        new
                        {
                            CountryId = 18,
                            Name = "Nga",
                            Slug = "nga",
                            Status = true
                        },
                        new
                        {
                            CountryId = 19,
                            Name = "Mexico",
                            Slug = "mexico",
                            Status = true
                        },
                        new
                        {
                            CountryId = 20,
                            Name = "Ba Lan",
                            Slug = "ba-lan",
                            Status = true
                        },
                        new
                        {
                            CountryId = 21,
                            Name = "Úc",
                            Slug = "uc",
                            Status = true
                        },
                        new
                        {
                            CountryId = 22,
                            Name = "Thụy Điển",
                            Slug = "thuy-dien",
                            Status = true
                        },
                        new
                        {
                            CountryId = 23,
                            Name = "Malaysia",
                            Slug = "malaysia",
                            Status = true
                        },
                        new
                        {
                            CountryId = 24,
                            Name = "Brazil",
                            Slug = "brazil",
                            Status = true
                        },
                        new
                        {
                            CountryId = 25,
                            Name = "Philippines",
                            Slug = "philippines",
                            Status = true
                        },
                        new
                        {
                            CountryId = 26,
                            Name = "Bồ Đào Nha",
                            Slug = "bo-dao-nha",
                            Status = true
                        },
                        new
                        {
                            CountryId = 27,
                            Name = "Ý",
                            Slug = "y",
                            Status = true
                        },
                        new
                        {
                            CountryId = 28,
                            Name = "Đan Mạch",
                            Slug = "dan-mach",
                            Status = true
                        },
                        new
                        {
                            CountryId = 29,
                            Name = "UAE",
                            Slug = "uae",
                            Status = true
                        },
                        new
                        {
                            CountryId = 30,
                            Name = "Na Uy",
                            Slug = "na-uy",
                            Status = true
                        },
                        new
                        {
                            CountryId = 31,
                            Name = "Thụy Sĩ",
                            Slug = "thuy-si",
                            Status = true
                        },
                        new
                        {
                            CountryId = 32,
                            Name = "Châu Phi",
                            Slug = "chau-phi",
                            Status = true
                        },
                        new
                        {
                            CountryId = 33,
                            Name = "Nam Phi",
                            Slug = "nam-phi",
                            Status = true
                        },
                        new
                        {
                            CountryId = 34,
                            Name = "Ukraina",
                            Slug = "ukraina",
                            Status = true
                        },
                        new
                        {
                            CountryId = 35,
                            Name = "Ả Rập Xê Út",
                            Slug = "a-rap-xe-ut",
                            Status = true
                        },
                        new
                        {
                            CountryId = 36,
                            Name = "Singapore",
                            Slug = "singapore",
                            Status = true
                        },
                        new
                        {
                            CountryId = 37,
                            Name = "Việt Nam",
                            Slug = "viet-nam",
                            Status = true
                        });
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EpisodeId");

                    b.HasIndex("MovieId", "EpisodeNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_Movie_EpisodeNumber");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("GenreId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Hành Động",
                            Slug = "hanh-dong",
                            Status = true
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Tình Cảm",
                            Slug = "tinh-cam",
                            Status = true
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Hài Hước",
                            Slug = "hai-huoc",
                            Status = true
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Cổ Trang",
                            Slug = "co-trang",
                            Status = true
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Tâm Lý",
                            Slug = "tam-ly",
                            Status = true
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Hình Sự",
                            Slug = "hinh-su",
                            Status = true
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Chiến Tranh",
                            Slug = "chien-tranh",
                            Status = true
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Thể Thao",
                            Slug = "the-thao",
                            Status = true
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "Võ Thuật",
                            Slug = "vo-thuat",
                            Status = true
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "Viễn Tưởng",
                            Slug = "vien-tuong",
                            Status = true
                        },
                        new
                        {
                            GenreId = 11,
                            Name = "Phiêu Lưu",
                            Slug = "phieu-luu",
                            Status = true
                        },
                        new
                        {
                            GenreId = 12,
                            Name = "Khoa Học",
                            Slug = "khoa-hoc",
                            Status = true
                        },
                        new
                        {
                            GenreId = 13,
                            Name = "Kinh Dị",
                            Slug = "kinh-di",
                            Status = true
                        },
                        new
                        {
                            GenreId = 14,
                            Name = "Âm Nhạc",
                            Slug = "am-nhac",
                            Status = true
                        },
                        new
                        {
                            GenreId = 15,
                            Name = "Thần Thoại",
                            Slug = "than-thoai",
                            Status = true
                        },
                        new
                        {
                            GenreId = 16,
                            Name = "Tài Liệu",
                            Slug = "tai-lieu",
                            Status = true
                        },
                        new
                        {
                            GenreId = 17,
                            Name = "Gia Đình",
                            Slug = "gia-dinh",
                            Status = true
                        },
                        new
                        {
                            GenreId = 18,
                            Name = "Chính kịch",
                            Slug = "chinh-kich",
                            Status = true
                        },
                        new
                        {
                            GenreId = 19,
                            Name = "Bí ẩn",
                            Slug = "bi-an",
                            Status = true
                        },
                        new
                        {
                            GenreId = 20,
                            Name = "Học Đường",
                            Slug = "hoc-duong",
                            Status = true
                        },
                        new
                        {
                            GenreId = 21,
                            Name = "Kinh Điển",
                            Slug = "kinh-dien",
                            Status = true
                        },
                        new
                        {
                            GenreId = 22,
                            Name = "Phim 18+",
                            Slug = "phim-18",
                            Status = true
                        });
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EpisodeCurrent")
                        .HasColumnType("int");

                    b.Property<int?>("EpisodeTotal")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHot")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("int");

                    b.Property<string>("ShowTimes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowTimesDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("View")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("MovieId");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Movie_CategoryId");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("IX_Movie_CountryId");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Movie_CreatedDate");

                    b.HasIndex("IsHot")
                        .HasDatabaseName("IX_Movie_IsHot");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Movie_Name");

                    b.HasIndex("SeriesId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Movie_Slug");

                    b.HasIndex("UpdatedDate")
                        .HasDatabaseName("IX_Movie_UpdatedDate");

                    b.HasIndex("View")
                        .HasDatabaseName("IX_Movie_View");

                    b.HasIndex("Year")
                        .HasDatabaseName("IX_Movie_Year");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Series", b =>
                {
                    b.Property<int>("SeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeriesId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("SeriesId");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasFilter("[Slug] IS NOT NULL");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServerId"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Episode", b =>
                {
                    b.HasOne("CineWorld.Services.MovieAPI.Models.Movie", "Movie")
                        .WithMany("Episodes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Movie", b =>
                {
                    b.HasOne("CineWorld.Services.MovieAPI.Models.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineWorld.Services.MovieAPI.Models.Country", "Country")
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineWorld.Services.MovieAPI.Models.Series", "Series")
                        .WithMany("Movies")
                        .HasForeignKey("SeriesId");

                    b.Navigation("Category");

                    b.Navigation("Country");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.MovieGenre", b =>
                {
                    b.HasOne("CineWorld.Services.MovieAPI.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineWorld.Services.MovieAPI.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Server", b =>
                {
                    b.HasOne("CineWorld.Services.MovieAPI.Models.Episode", "Episode")
                        .WithMany("Servers")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Country", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Episode", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Movie", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("CineWorld.Services.MovieAPI.Models.Series", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
